package com.fire.excel;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;

import org.dom4j.DocumentException;

import com.fire.excel.txt.TxtWorkbook;
import com.fire.util.StringUtil;

import jxl.Sheet;
import jxl.Workbook;

public class DataTemplateCoder
{
	private String excelDir = "D:/gitWorkspace/ResourceServer/resource/config/";
	private String fileDir = "../GameServer/src/main/java/com/fire/game/configdata/exceldata/";
	private String packageName = "com.fire.game.configdata.exceldata";
	private String fileNameSuffix = "Data.java";
	private String classNameSuffix = "Data";
	private String baseClassName = "TemplateObject";

	public void generateFile(String fileName) throws DocumentException,
			IOException
	{
		File file = new File(fileDir + StringUtil.toUpperCaseFirstOne(fileName)
				+ fileNameSuffix);
		if (file.exists())
			file.delete();
		file.createNewFile();

		FileWriter fileWriter = new FileWriter(file, false);
		BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

		bufferedWriter
				.write("//This file is generated by program. Do not edit it manually.\n\n");
		bufferedWriter.newLine();
		bufferedWriter.newLine();
		bufferedWriter.write("package " + this.packageName + ";\n");
		bufferedWriter.newLine();
		bufferedWriter.write("import com.fire.excel.ExcelCellBinding;\n");
		bufferedWriter.write("import com.fire.excel.ExcelRowBinding;\n");
		bufferedWriter.write("import com.fire.excel.TemplateObject;\n");

		bufferedWriter.newLine();
		bufferedWriter.newLine();
		bufferedWriter.write("@ExcelRowBinding\n");
		bufferedWriter.write("public class "
				+ StringUtil.toUpperCaseFirstOne(fileName) + classNameSuffix);
		bufferedWriter.write(" extends " + baseClassName + "\n");
		bufferedWriter.write("{"); 
		bufferedWriter.newLine();
		

		Workbook workbook = null;
//		try
//		{
//			workbook = Workbook.getWorkbook(new File(excelDir + fileName
//					+ ".xls"));
//		} catch (Exception e)
//		{
//			e.printStackTrace();
//		}
	    FileInputStream fis=new FileInputStream(new File(excelDir + fileName + ".txt"));
	 
		byte[] bytes = new byte[fis.available()];
		fis.read(bytes);
		workbook = new TxtWorkbook(bytes); 

		Sheet sheet = workbook.getSheet(0);
		int columnCount = sheet.getColumns();
		
		for (int j = 1; j < columnCount; j++)
		{
			if ("".equals(sheet.getCell(j, 1).getContents())
					|| "".equals(sheet.getCell(j, 0).getContents()))
				continue;
			bufferedWriter.write("\t@ExcelCellBinding\n");
			bufferedWriter.write("\tprotected "
					+ getType(sheet.getCell(j, 1).getContents()) + " "
					+ sheet.getCell(j, 0).getContents() + ";\n");
			bufferedWriter.newLine();

		}

		for (int j = 1; j < columnCount; j++)
		{
			bufferedWriter.write("\tpublic "
						+ getType(sheet.getCell(j, 1).getContents())
						+ " get"
						+ StringUtil.toUpperCaseFirstOne(sheet.getCell(j, 0)
								.getContents()) + "()\n");
			bufferedWriter.write("\t{\n");
			bufferedWriter.write("\t\treturn "
					+ sheet.getCell(j, 0).getContents() + ";\n");
			bufferedWriter.write("\t}\n");

			bufferedWriter.newLine();

			bufferedWriter.write("\tpublic void set"
					+ StringUtil.toUpperCaseFirstOne(sheet.getCell(j, 0)
							.getContents()) + "("
					+ getType(sheet.getCell(j, 1).getContents()) + " "
					+ sheet.getCell(j, 0).getContents() + ")\n");
			bufferedWriter.write("\t{\n");
			bufferedWriter.write("\t\t this."
					+ sheet.getCell(j, 0).getContents() + " = "
					+ sheet.getCell(j, 0).getContents() + ";\n");
			bufferedWriter.write("\t}\n");
			bufferedWriter.newLine();
		}
		workbook.close();

		bufferedWriter.write("}");
		bufferedWriter.newLine();

		System.out.println(file);
		bufferedWriter.close();
	}

	public static void main(String[] args) throws DocumentException,
			IOException
	{
		DataTemplateCoder coder = new DataTemplateCoder();

		coder.gener();

	}
	
	
	private String getType(String type){
		
		String tempType = type.toLowerCase();
		
		if(tempType.equals("int")){
			return "int";
		}else if(tempType.equals("byte")){
			return "byte";
		}else if(tempType.equals("short")){
			return "short";
		}else if(tempType.equals("long")){
			return "long";
		}else if(tempType.equals("string")){
			return "String";
		}else if(tempType.equals("float")){
			return "float";
		}else if(tempType.equals("double")){
			return "double";
		}else if(tempType.equals("bool")){
			return "boolean";
		}
		
		return type;
	}
	
	public void gener() throws DocumentException, IOException{
		File file = new File(excelDir);
		if (file.isDirectory())
		{
			for (String fileName : file.list())
			{
				if (fileName.indexOf("txt") > -1)
					generateFile(fileName.substring(0,
							fileName.length() - 4));
			}
		}
	}

	public void gener(String excelDir, String fileDir, String packageName) throws DocumentException, IOException {
		this.excelDir = excelDir;
		this.fileDir = fileDir;
		this.packageName = packageName;
		
		gener();
	}
}
